# DYNAMIC PROGRAMMING

Example 1: House Robber Problem
Problem Statement: You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.
Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

const nums = [2, 3, 2];
console.log(rob(nums)); // Output: 3

const nums2 = [1, 2, 3, 1];
console.log(rob(nums2)); // Output: 4



Example 2: Longest Increasing Subsequence
Problem Statement: Given an integer array nums, return the length of the longest strictly increasing subsequence.

const nums = [10, 9, 2, 5, 3, 7, 101, 18];
console.log(lengthOfLIS(nums)); // Output: 4

const nums2 = [0, 1, 0, 3, 2, 3];
console.log(lengthOfLIS(nums2)); // Output: 4


# PATTERN PRINTING

Example 1: Pascal's Triangle
Problem Statement: Given an integer numRows, return the first numRows of Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it.

const numRows = 5;
console.log(generate(numRows));
// Output:
// [
//      [1],
//     [1, 1],
//    [1, 2, 1],
//   [1, 3, 3, 1],
//  [1, 4, 6, 4, 1]
// ]


Example 2: Zigzag Pattern
Problem Statement:
Given an integer n, create a zigzag pattern using asterisks (*). The pattern should have n rows.

const n = 4;
console.log(zigzagPattern(n));
// Output:
// *   *
//  * *
//   *
//  * *
// *   *